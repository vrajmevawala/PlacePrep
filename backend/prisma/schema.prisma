generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  Aptitude
  Technical
}

enum Level {
  easy
  medium
  hard
}

enum Role {
  user
  moderator
  admin
}

model User {
  id           Int           @id @default(autoincrement())
  role         Role          @default(user)
  fullName     String
  email        String        @unique
  password     String
  created_at   DateTime      @default(now())
  
  questions    Question[]    @relation("UserQuestions")
  testSeries   TestSeries[]  @relation("UserTestSeries")
  freePractice freePractice[]@relation("UserFreePractice")
  participations Participation[]
  studentActivities StudentActivity[]
}

model Question {
  id           Int       @id @default(autoincrement())
  category     Category
  subcategory  String
  level        Level
  question     String
  options      Json
  correctAns   String
  explanation  String
  visibility   Boolean   @default(true)
  createdBy    Int
  created_at   DateTime  @default(now())

  author       User      @relation("UserQuestions", fields: [createdBy], references: [id])
  testSeries   TestSeries[] @relation("TestSeriesQuestions")
  freePractice freePractice[] @relation("FreePracticeQuestions")
  studentActivities StudentActivity[]
}

model TestSeries {
  id             Int            @id @default(autoincrement())
  title          String
  startTime      DateTime
  endTime        DateTime
  createdBy      Int

  creator        User           @relation("UserTestSeries", fields: [createdBy], references: [id])
  questions      Question[]     @relation("TestSeriesQuestions")
  participations Participation[] @relation("TestSeriesParticipation")
}

model freePractice {
  id             Int            @id @default(autoincrement())
  title          String
  category       Category
  subcategory    String
  level          Level
  startTime      DateTime
  endTime        DateTime
  createdBy      Int

  creator        User           @relation("UserFreePractice", fields: [createdBy], references: [id])
  questions      Question[]     @relation("FreePracticeQuestions")
  participations Participation[] @relation("FreePracticeParticipation")
}

model Participation {
  pid           Int       @id @default(autoincrement())
  sid           Int       // user ID
  practiceTest  Boolean
  contest       Boolean
  testSeriesId  Int?      // testSeries ID
  freePracticeId Int?     // freePractice ID
  startTime     DateTime
  endTime       DateTime

  user          User      @relation(fields: [sid], references: [id])
  testSeries    TestSeries? @relation("TestSeriesParticipation", fields: [testSeriesId], references: [id])
  freePractice  freePractice? @relation("FreePracticeParticipation", fields: [freePracticeId], references: [id])
}

model StudentActivity {
  aid           Int       @id @default(autoincrement())
  sid           Int       // user ID
  qid           Int       // question ID
  time          DateTime

  user          User      @relation(fields: [sid], references: [id])
  question      Question  @relation(fields: [qid], references: [id])
}